"""Handlers for email verification flow."""

from __future__ import annotations

from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from ..core.logging import get_logger
from ..domain import validate_email
from ..services.email_verification import start_email_verification, verify_email_code
from ..state import EditEmailState
from .pages import render_edit_email, render_profile, render_require_auth
from .utils import delete_user_message, load_active_profile

router = Router()

_logger = get_logger(__name__).bind(handler="email")


@router.message(EditEmailState.await_email)
async def handle_email_input(message: Message, state: FSMContext) -> None:
    await delete_user_message(message)
    email = (message.text or "").strip()
    if not validate_email(email):
        await render_edit_email(
            message.bot,
            state,
            message.chat.id,
            nav_action="replace",
            prompt="–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ e-mail. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
        )
        return

    profile = await load_active_profile(state)
    if not profile:
        await render_require_auth(message.bot, state, message.chat.id, nav_action="replace")
        return

    try:
        updated = await start_email_verification(profile, email)
    except Exception as exc:  # pragma: no cover - defensive
        _logger.exception("failed to send verification email", error=str(exc))
        await render_edit_email(
            message.bot,
            state,
            message.chat.id,
            nav_action="replace",
            prompt=(
                "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ üòî\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ—á—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n"
                "–ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, —É–∫–∞–∂–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
            ),
        )
        return

    await state.set_state(EditEmailState.await_code)
    await render_edit_email(
        message.bot,
        state,
        message.chat.id,
        nav_action="replace",
        await_code=True,
        email=updated.email,
        prompt="–í–≤–µ–¥–∏—Ç–µ —à–µ—Å—Ç–∏–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ –ø–∏—Å—å–º–∞.",
    )


@router.message(EditEmailState.await_code)
async def handle_code_input(message: Message, state: FSMContext) -> None:
    await delete_user_message(message)
    code = (message.text or "").strip()
    profile = await load_active_profile(state)
    if not profile:
        await render_require_auth(message.bot, state, message.chat.id, nav_action="replace")
        return

    if not code.isdigit() or len(code) != 6:
        await render_edit_email(
            message.bot,
            state,
            message.chat.id,
            nav_action="replace",
            await_code=True,
            email=profile.email,
            prompt="–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä.",
        )
        return

    success, updated = verify_email_code(profile, code)
    if not success:
        await render_edit_email(
            message.bot,
            state,
            message.chat.id,
            nav_action="replace",
            await_code=True,
            email=profile.email,
            prompt="–ö–æ–¥ –Ω–µ –ø–æ–¥–æ—à—ë–ª –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–ü–æ—á—Ç–∞¬ª.",
        )
        return

    await state.set_state(None)
    await render_profile(
        message.bot,
        state,
        message.chat.id,
        updated,
        nav_action="replace",
        extra="–ü–æ—á—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ",
    )


__all__ = ["router"]
