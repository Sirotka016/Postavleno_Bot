from __future__ import annotations

import time
from contextlib import contextmanager
from datetime import datetime
from typing import Iterator, Optional

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message, ReplyKeyboardRemove
import structlog
from structlog.stdlib import BoundLogger

from ..core.logging import get_logger
from ..keyboards.common import main_menu
from ..state.session import session_storage
from ..utils.safe_telegram import safe_delete, safe_edit, safe_send

MENU_ROUTER = Router(name="menu")

REFRESH_CALLBACK = "refresh_menu"
EXIT_CALLBACK = "exit_menu"


@contextmanager
def _action_logger(action: str, request_id: str) -> Iterator[BoundLogger]:
    structlog.contextvars.bind_contextvars(action=action)
    logger = get_logger(__name__).bind(action=action, request_id=request_id)
    try:
        yield logger
    finally:
        try:
            structlog.contextvars.unbind_contextvars("action")
        except LookupError:
            pass


def _format_timestamp(now: datetime | None = None) -> str:
    moment = now or datetime.now()
    return moment.strftime("%d.%m.%Y %H:%M")


def build_greeting_text(now: datetime | None = None) -> str:
    timestamp = _format_timestamp(now)
    return (
        "–ü—Ä–∏–≤–µ—Ç! üëã –ú–µ–Ω—è –∑–æ–≤—É—Ç <b>Postavleno_Bot</b>\n"
        "–ü–æ–º–æ–≥–∞—é —Å –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏ –Ω–∞ Wildberries: –ø–æ–¥—Å–∫–∞–∂—É, –≥–¥–µ —á—Ç–æ –Ω–∞–π—Ç–∏, –ø—Ä–æ–≤–µ—Ä—é —Å—Ç–∞—Ç—É—Å—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚ÑπÔ∏è –ü–æ–º–æ—â—å¬ª.\n\n"
        f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}</i>"
    )


def build_help_text(now: datetime | None = None) -> str:
    timestamp = _format_timestamp(now)
    return (
        "<b>‚ÑπÔ∏è –ü–æ–º–æ—â—å</b>\n"
        "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã: \n"
        "‚Ä¢ ¬´üîé –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞¬ª ‚Äî —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏ –∏ –±—É–¥—É—â–∏–º–∏ –æ—Ç–≥—Ä—É–∑–∫–∞–º–∏.\n"
        "‚Ä¢ ¬´üì¶ –¢–æ–≤–∞—Ä—ã¬ª ‚Äî —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –∫–∞—Ç–∞–ª–æ–≥ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏.\n\n"
        "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ ¬´üîÑ –û–±–Ω–æ–≤–∏—Ç—å¬ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start.\n\n"
        f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}</i>"
    )


def build_status_text(now: datetime | None = None) -> str:
    timestamp = _format_timestamp(now)
    return (
        "<b>üîé –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞</b>\n"
        "–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ —è –Ω–∞—É—á—É—Å—å –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ ‚Äî –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´üîÑ –û–±–Ω–æ–≤–∏—Ç—å¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª.\n\n"
        f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}</i>"
    )


def build_products_text(now: datetime | None = None) -> str:
    timestamp = _format_timestamp(now)
    return (
        "<b>üì¶ –¢–æ–≤–∞—Ä—ã</b>\n"
        "–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∫–∞—Ç–∞–ª–æ–≥ –≤–∞—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ Wildberries: –æ—Å—Ç–∞—Ç–∫–∏, —Ü–µ–Ω—ã –∏ –±—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ ‚Äî –º—ã –≤—Å—ë –≥–æ—Ç–æ–≤–∏–º.\n\n"
        "–ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∏–ª–∏ —Å—Ä–∞–∑—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.\n\n"
        f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}</i>"
    )


def _inline_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=REFRESH_CALLBACK),
                InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏", callback_data=EXIT_CALLBACK),
            ]
        ]
    )


async def _render_card(
    *,
    bot: Bot,
    chat_id: int,
    text: str,
    with_reply_keyboard: bool,
) -> Optional[int]:
    inline_markup = _inline_menu()
    last_message_id = await session_storage.get_last_message_id(chat_id)

    if last_message_id:
        edited = await safe_edit(
            bot,
            chat_id=chat_id,
            message_id=last_message_id,
            text=text,
            inline_markup=inline_markup,
        )
        if edited:
            await session_storage.set_last_message_id(chat_id, edited.message_id)
            return edited.message_id

    reply_markup = main_menu() if with_reply_keyboard else inline_markup
    message = await safe_send(
        bot,
        chat_id=chat_id,
        text=text,
        reply_markup=reply_markup,
    )
    if not message:
        return None

    await session_storage.set_last_message_id(chat_id, message.message_id)

    if with_reply_keyboard:
        await safe_edit(
            bot,
            chat_id=chat_id,
            message_id=message.message_id,
            text=text,
            inline_markup=inline_markup,
        )

    if last_message_id and last_message_id != message.message_id:
        await safe_delete(bot, chat_id=chat_id, message_id=last_message_id)

    return message.message_id


@MENU_ROUTER.message(Command("start"))
async def handle_start(message: Message, bot: Bot, request_id: str, started_at: float) -> None:
    with _action_logger("start", request_id) as logger:
        logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")

        await safe_delete(bot, chat_id=message.chat.id, message_id=message.message_id)

        message_id = await _render_card(
            bot=bot,
            chat_id=message.chat.id,
            text=build_greeting_text(),
            with_reply_keyboard=True,
        )
        success = message_id is not None

        latency_ms = round((time.perf_counter() - started_at) * 1000, 2)
        structlog.contextvars.bind_contextvars(latency_ms=latency_ms)
        logger.info("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫–∞–∑–∞–Ω–æ", result="ok" if success else "fail", message_id=message_id)
        structlog.contextvars.unbind_contextvars("latency_ms")


@MENU_ROUTER.message(Command("help"))
async def handle_help(message: Message, bot: Bot, request_id: str, started_at: float) -> None:
    with _action_logger("help", request_id) as logger:
        logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help")

        await safe_delete(bot, chat_id=message.chat.id, message_id=message.message_id)

        message_id = await _render_card(
            bot=bot,
            chat_id=message.chat.id,
            text=build_help_text(),
            with_reply_keyboard=True,
        )
        success = message_id is not None

        latency_ms = round((time.perf_counter() - started_at) * 1000, 2)
        structlog.contextvars.bind_contextvars(latency_ms=latency_ms)
        logger.info("–°–ø—Ä–∞–≤–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∞", result="ok" if success else "fail", message_id=message_id)
        structlog.contextvars.unbind_contextvars("latency_ms")


@MENU_ROUTER.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def handle_help_button(message: Message, bot: Bot, request_id: str, started_at: float) -> None:
    await handle_help(message, bot, request_id, started_at)


@MENU_ROUTER.message(F.text == "üîé –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞")
async def handle_status_button(message: Message, bot: Bot, request_id: str, started_at: float) -> None:
    with _action_logger("status", request_id) as logger:
        logger.info("–í—ã–±—Ä–∞–Ω —Ä–∞–∑–¥–µ–ª —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞")

        await safe_delete(bot, chat_id=message.chat.id, message_id=message.message_id)
        message_id = await _render_card(
            bot=bot,
            chat_id=message.chat.id,
            text=build_status_text(),
            with_reply_keyboard=True,
        )
        success = message_id is not None

        latency_ms = round((time.perf_counter() - started_at) * 1000, 2)
        structlog.contextvars.bind_contextvars(latency_ms=latency_ms)
        logger.info("–ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∫–∞–∑–∞–Ω–∞", result="ok" if success else "fail", message_id=message_id)
        structlog.contextvars.unbind_contextvars("latency_ms")


@MENU_ROUTER.message(F.text == "üì¶ –¢–æ–≤–∞—Ä—ã")
async def handle_products_button(message: Message, bot: Bot, request_id: str, started_at: float) -> None:
    with _action_logger("products", request_id) as logger:
        logger.info("–í—ã–±—Ä–∞–Ω —Ä–∞–∑–¥–µ–ª —Ç–æ–≤–∞—Ä–æ–≤")

        await safe_delete(bot, chat_id=message.chat.id, message_id=message.message_id)
        message_id = await _render_card(
            bot=bot,
            chat_id=message.chat.id,
            text=build_products_text(),
            with_reply_keyboard=True,
        )
        success = message_id is not None

        latency_ms = round((time.perf_counter() - started_at) * 1000, 2)
        structlog.contextvars.bind_contextvars(latency_ms=latency_ms)
        logger.info("–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞–∑–∞–Ω–∞", result="ok" if success else "fail", message_id=message_id)
        structlog.contextvars.unbind_contextvars("latency_ms")


@MENU_ROUTER.message()
async def handle_unknown_message(message: Message, bot: Bot, request_id: str, started_at: float) -> None:
    with _action_logger("unknown_text", request_id) as logger:
        logger.info("–ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç", text=message.text)

        await safe_delete(bot, chat_id=message.chat.id, message_id=message.message_id)
        message_id = await _render_card(
            bot=bot,
            chat_id=message.chat.id,
            text=build_greeting_text(),
            with_reply_keyboard=True,
        )
        success = message_id is not None

        latency_ms = round((time.perf_counter() - started_at) * 1000, 2)
        structlog.contextvars.bind_contextvars(latency_ms=latency_ms)
        logger.info(
            "–ö–∞—Ä—Ç–æ—á–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞",
            result="ok" if success else "fail",
            message_id=message_id,
        )
        structlog.contextvars.unbind_contextvars("latency_ms")


@MENU_ROUTER.callback_query(lambda c: c.data == REFRESH_CALLBACK)
async def handle_refresh(callback: CallbackQuery, bot: Bot, request_id: str, started_at: float) -> None:
    with _action_logger("refresh", request_id) as logger:
        logger.info("–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é")

        if callback.message is None:
            await callback.answer()
            return

        await callback.answer(text="–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚ú®", show_alert=False)
        message_id = await _render_card(
            bot=bot,
            chat_id=callback.message.chat.id,
            text=build_greeting_text(),
            with_reply_keyboard=False,
        )
        success = message_id is not None

        latency_ms = round((time.perf_counter() - started_at) * 1000, 2)
        structlog.contextvars.bind_contextvars(latency_ms=latency_ms)
        logger.info("–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ", result="ok" if success else "fail", message_id=message_id)
        structlog.contextvars.unbind_contextvars("latency_ms")


@MENU_ROUTER.callback_query(lambda c: c.data == EXIT_CALLBACK)
async def handle_exit(callback: CallbackQuery, bot: Bot, request_id: str, started_at: float) -> None:
    with _action_logger("exit", request_id) as logger:
        logger.info("–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é")

        if callback.message is None:
            await callback.answer()
            return

        await callback.answer(text="–î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã", show_alert=False)

        chat_id = callback.message.chat.id
        message_id = callback.message.message_id

        await safe_delete(bot, chat_id=chat_id, message_id=message_id)
        await session_storage.clear(chat_id)

        removal = await safe_send(
            bot,
            chat_id=chat_id,
            text="–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ /start",
            reply_markup=ReplyKeyboardRemove(),
        )
        if removal:
            await safe_delete(bot, chat_id=chat_id, message_id=removal.message_id)

        latency_ms = round((time.perf_counter() - started_at) * 1000, 2)
        structlog.contextvars.bind_contextvars(latency_ms=latency_ms)
        logger.info("–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ", result="ok")
        structlog.contextvars.unbind_contextvars("latency_ms")
