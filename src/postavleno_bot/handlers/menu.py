from __future__ import annotations

import time
from datetime import datetime
from typing import Optional

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message, ReplyKeyboardRemove
import structlog

from ..core.logging import get_logger
from ..keyboards.common import main_menu
from ..state.session import session_storage
from ..utils.safe_telegram import (
    safe_delete_message,
    safe_edit_message_text,
    safe_edit_reply_markup,
    safe_send_message,
)

MENU_ROUTER = Router(name="menu")

REFRESH_CALLBACK = "refresh_menu"
EXIT_CALLBACK = "exit_menu"


def _format_timestamp() -> str:
    return datetime.now().strftime("%d.%m.%Y %H:%M:%S")


def _main_card_text() -> str:
    return (
        "<b>–ü—Ä–∏–≤–µ—Ç! üëã –ú–µ–Ω—è –∑–æ–≤—É—Ç Postavleno_Bot</b>\n"
        "–ü–æ–º–æ–≥–∞—é —Å –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏ –Ω–∞ Wildberries: –ø–æ–¥—Å–∫–∞–∂—É, –≥–¥–µ —á—Ç–æ –Ω–∞–π—Ç–∏, –ø–æ–∫–∞–∂—É —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ. –ù–∞–∂–º–∏—Ç–µ <code>‚ÑπÔ∏è –ü–æ–º–æ—â—å</code>, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ.\n\n"
        f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {_format_timestamp()}</i>"
    )


def _help_card_text() -> str:
    return (
        "<b>–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?</b>\n"
        "–Ø –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å: \n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞–≤–æ–∫ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ‚Äòüîé –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞‚Äô.\n"
        "‚Ä¢ –ò–∑—É—á–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ ‚Äòüì¶ –¢–æ–≤–∞—Ä—ã‚Äô.\n\n"
        "–ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∏–¥–µ–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ ‚ÄòüîÑ –û–±–Ω–æ–≤–∏—Ç—å‚Äô –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.\n\n"
        f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {_format_timestamp()}</i>"
    )


def _status_card_text() -> str:
    return (
        "<b>üîé –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞</b>\n"
        "–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ —è –Ω–∞—É—á—É—Å—å –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏. –ü–æ–∫–∞ —á—Ç–æ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ ‚Äî –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ‚ÄòüîÑ –û–±–Ω–æ–≤–∏—Ç—å‚Äô, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ.\n\n"
        f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {_format_timestamp()}</i>"
    )


def _products_card_text() -> str:
    return (
        "<b>üì¶ –¢–æ–≤–∞—Ä—ã</b>\n"
        "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø–æ—è–≤–∏—Ç—Å—è –∫–∞—Ç–∞–ª–æ–≥ –≤–∞—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ Wildberries: –æ—Å—Ç–∞—Ç–∫–∏, —Ü–µ–Ω—ã –∏ –±—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥–ª—è–Ω–∏—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ ‚Äî –º—ã –≤—Å—ë –≥–æ—Ç–æ–≤–∏–º.\n\n"
        "–ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.\n\n"
        f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {_format_timestamp()}</i>"
    )


def _inline_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=REFRESH_CALLBACK),
                InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏", callback_data=EXIT_CALLBACK),
            ]
        ]
    )


async def _render_card(
    *,
    bot: Bot,
    chat_id: int,
    text: str,
    with_reply_keyboard: bool,
) -> Optional[int]:
    inline_markup = _inline_menu()
    last_message_id = await session_storage.get_last_message_id(chat_id)

    if last_message_id:
        edited = await safe_edit_message_text(
            bot,
            chat_id=chat_id,
            message_id=last_message_id,
            text=text,
            inline_markup=inline_markup,
        )
        if edited:
            await session_storage.set_last_message_id(chat_id, edited.message_id)
            return edited.message_id

    reply_markup = main_menu() if with_reply_keyboard else inline_markup
    message = await safe_send_message(
        bot,
        chat_id=chat_id,
        text=text,
        reply_markup=reply_markup,
    )
    if not message:
        return None

    if with_reply_keyboard:
        await safe_edit_reply_markup(bot, chat_id=chat_id, message_id=message.message_id, inline_markup=inline_markup)

    await session_storage.set_last_message_id(chat_id, message.message_id)

    if last_message_id and last_message_id != message.message_id:
        await safe_delete_message(bot, chat_id=chat_id, message_id=last_message_id)

    return message.message_id


@MENU_ROUTER.message(Command("start"))
async def handle_start(message: Message, bot: Bot, request_id: str, started_at: float) -> None:
    logger = get_logger(__name__).bind(action="start", request_id=request_id)
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")

    await safe_delete_message(bot, chat_id=message.chat.id, message_id=message.message_id)

    message_id = await _render_card(
        bot=bot,
        chat_id=message.chat.id,
        text=_main_card_text(),
        with_reply_keyboard=True,
    )
    success = message_id is not None

    latency_ms = round((time.perf_counter() - started_at) * 1000, 2)
    structlog.contextvars.bind_contextvars(latency_ms=latency_ms)
    logger.info("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫–∞–∑–∞–Ω–æ", result="ok" if success else "fail", message_id=message_id)
    structlog.contextvars.unbind_contextvars("latency_ms")


@MENU_ROUTER.message(Command("help"))
async def handle_help(message: Message, bot: Bot, request_id: str, started_at: float) -> None:
    logger = get_logger(__name__).bind(action="help", request_id=request_id)
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help")

    await safe_delete_message(bot, chat_id=message.chat.id, message_id=message.message_id)

    message_id = await _render_card(
        bot=bot,
        chat_id=message.chat.id,
        text=_help_card_text(),
        with_reply_keyboard=True,
    )
    success = message_id is not None

    latency_ms = round((time.perf_counter() - started_at) * 1000, 2)
    structlog.contextvars.bind_contextvars(latency_ms=latency_ms)
    logger.info("–°–ø—Ä–∞–≤–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∞", result="ok" if success else "fail", message_id=message_id)
    structlog.contextvars.unbind_contextvars("latency_ms")


@MENU_ROUTER.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def handle_help_button(message: Message, bot: Bot, request_id: str, started_at: float) -> None:
    await handle_help(message, bot, request_id, started_at)


@MENU_ROUTER.message(F.text == "üîé –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞")
async def handle_status_button(message: Message, bot: Bot, request_id: str, started_at: float) -> None:
    logger = get_logger(__name__).bind(action="status", request_id=request_id)
    logger.info("–í—ã–±—Ä–∞–Ω —Ä–∞–∑–¥–µ–ª —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞")

    await safe_delete_message(bot, chat_id=message.chat.id, message_id=message.message_id)
    message_id = await _render_card(
        bot=bot,
        chat_id=message.chat.id,
        text=_status_card_text(),
        with_reply_keyboard=True,
    )
    success = message_id is not None

    latency_ms = round((time.perf_counter() - started_at) * 1000, 2)
    structlog.contextvars.bind_contextvars(latency_ms=latency_ms)
    logger.info("–ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∫–∞–∑–∞–Ω–∞", result="ok" if success else "fail", message_id=message_id)
    structlog.contextvars.unbind_contextvars("latency_ms")


@MENU_ROUTER.message(F.text == "üì¶ –¢–æ–≤–∞—Ä—ã")
async def handle_products_button(message: Message, bot: Bot, request_id: str, started_at: float) -> None:
    logger = get_logger(__name__).bind(action="products", request_id=request_id)
    logger.info("–í—ã–±—Ä–∞–Ω —Ä–∞–∑–¥–µ–ª —Ç–æ–≤–∞—Ä–æ–≤")

    await safe_delete_message(bot, chat_id=message.chat.id, message_id=message.message_id)
    message_id = await _render_card(
        bot=bot,
        chat_id=message.chat.id,
        text=_products_card_text(),
        with_reply_keyboard=True,
    )
    success = message_id is not None

    latency_ms = round((time.perf_counter() - started_at) * 1000, 2)
    structlog.contextvars.bind_contextvars(latency_ms=latency_ms)
    logger.info("–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞–∑–∞–Ω–∞", result="ok" if success else "fail", message_id=message_id)
    structlog.contextvars.unbind_contextvars("latency_ms")


@MENU_ROUTER.message()
async def handle_unknown_message(message: Message, bot: Bot, request_id: str, started_at: float) -> None:
    logger = get_logger(__name__).bind(action="unknown_text", request_id=request_id)
    logger.info("–ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç", text=message.text)

    await safe_delete_message(bot, chat_id=message.chat.id, message_id=message.message_id)
    message_id = await _render_card(
        bot=bot,
        chat_id=message.chat.id,
        text=_main_card_text(),
        with_reply_keyboard=True,
    )
    success = message_id is not None

    latency_ms = round((time.perf_counter() - started_at) * 1000, 2)
    structlog.contextvars.bind_contextvars(latency_ms=latency_ms)
    logger.info(
        "–ö–∞—Ä—Ç–æ—á–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞",
        result="ok" if success else "fail",
        message_id=message_id,
    )
    structlog.contextvars.unbind_contextvars("latency_ms")


@MENU_ROUTER.callback_query(lambda c: c.data == REFRESH_CALLBACK)
async def handle_refresh(callback: CallbackQuery, bot: Bot, request_id: str, started_at: float) -> None:
    logger = get_logger(__name__).bind(action="refresh", request_id=request_id)
    logger.info("–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é")

    if callback.message is None:
        await callback.answer()
        return

    await callback.answer(text="–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚ú®", show_alert=False)
    message_id = await _render_card(
        bot=bot,
        chat_id=callback.message.chat.id,
        text=_main_card_text(),
        with_reply_keyboard=False,
    )
    success = message_id is not None

    latency_ms = round((time.perf_counter() - started_at) * 1000, 2)
    structlog.contextvars.bind_contextvars(latency_ms=latency_ms)
    logger.info("–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ", result="ok" if success else "fail", message_id=message_id)
    structlog.contextvars.unbind_contextvars("latency_ms")


@MENU_ROUTER.callback_query(lambda c: c.data == EXIT_CALLBACK)
async def handle_exit(callback: CallbackQuery, bot: Bot, request_id: str, started_at: float) -> None:
    logger = get_logger(__name__).bind(action="exit", request_id=request_id)
    logger.info("–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é")

    if callback.message is None:
        await callback.answer()
        return

    await callback.answer(text="–î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã", show_alert=False)

    chat_id = callback.message.chat.id
    message_id = callback.message.message_id

    await safe_delete_message(bot, chat_id=chat_id, message_id=message_id)
    await session_storage.clear(chat_id)

    removal = await safe_send_message(
        bot,
        chat_id=chat_id,
        text="–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove(),
    )
    if removal:
        await safe_delete_message(bot, chat_id=chat_id, message_id=removal.message_id)

    latency_ms = round((time.perf_counter() - started_at) * 1000, 2)
    structlog.contextvars.bind_contextvars(latency_ms=latency_ms)
    logger.info("–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ", result="ok")
    structlog.contextvars.unbind_contextvars("latency_ms")
