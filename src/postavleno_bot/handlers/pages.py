"""Rendering helpers for bot screens."""

from __future__ import annotations

from datetime import datetime

from aiogram import Bot
from aiogram.fsm.context import FSMContext

from ..navigation import (
    SCREEN_AUTH_MENU,
    SCREEN_DELETE_CONFIRM,
    SCREEN_EDIT_EMAIL,
    SCREEN_EDIT_MS,
    SCREEN_EDIT_WB,
    SCREEN_EXPORT_STATUS,
    SCREEN_HOME,
    SCREEN_LOGIN,
    SCREEN_PROFILE,
    SCREEN_REGISTER,
    SCREEN_UNKNOWN,
    ScreenState,
    nav_push,
    nav_replace,
    nav_root,
)
from ..services.accounts import AccountProfile
from ..ui import (
    card_manager,
    kb_auth_menu,
    kb_delete_confirm,
    kb_delete_error,
    kb_edit_email,
    kb_edit_ms,
    kb_edit_wb,
    kb_export_error,
    kb_export_missing_token,
    kb_home,
    kb_login,
    kb_profile,
    kb_register,
    kb_retry_login,
    kb_retry_register,
    kb_unknown,
)

GUEST_HOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø Postavleno_Bot üëã\n"
    "–ü–æ–º–æ–≥–∞—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å Wildberries –∏ –ú–æ–π–°–∫–ª–∞–¥. –ù–∞—á–Ω—ë–º —Å –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç.\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
    "‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ‚Äî –≤–æ–π—Ç–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç\n"
    "‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π"
)

AUTH_HOME_TEMPLATE = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!\n\n"
    "–°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π:\n"
    "‚Ä¢ WB API: {wb}\n"
    "‚Ä¢ –ú–æ–π–°–∫–ª–∞–¥ API: {ms}\n\n"
    "–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ."
)

EXPORT_PROGRESS_TEXT = "–ì–æ—Ç–æ–≤–ª—é —Ñ–∞–π–ª‚Ä¶ —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã ‚è≥"
EXPORT_MISSING_TEMPLATE = "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–ª—é—á–∞ {service}. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω."
EXPORT_ERROR_TEXT = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

REQUIRE_AUTH_TEXT = "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è."

LOGIN_TEXT = "üîë –í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç\n\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω."
LOGIN_PASSWORD_TEXT = "üîë –í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç\n\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å."
REGISTER_TEXT = (
    "üÜï –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n"
    "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ª–æ–≥–∏–Ω: –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∞, –¥–µ—Ñ–∏—Å, –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ (3‚Äì32)."
)
REGISTER_PASSWORD_TEXT = "üÜï –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (‚â• 6 —Å–∏–º–≤–æ–ª–æ–≤)."
EDIT_WB_TEXT = "üîß –°–º–µ–Ω–∞ WB API –∫–ª—é—á–∞\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á."
EDIT_MS_TEXT = "üîß –°–º–µ–Ω–∞ ¬´–ú–æ–π –°–∫–ª–∞–¥¬ª API –∫–ª—é—á–∞\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á."
EDIT_EMAIL_TEXT = "üìß –ü–æ—á—Ç–∞\n\n–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email."
LOGIN_ERROR_TEXT = "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
REGISTER_TAKEN_TEXT = "–õ–æ–≥–∏–Ω –∑–∞–Ω—è—Ç, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–π."
SUCCESS_SAVED = "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ."
UNKNOWN_TEXT = "–•–º–º‚Ä¶ —è –Ω–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å ü§î\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ."

DELETE_CONFIRM_TEXT = (
    "–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
    "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–≤—Å–µ–≥–¥–∞ —É–¥–∞–ª–∏—Ç –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —ç—Ç–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ. –û—Ç–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è.\n\n"
    "–í—ã —É–≤–µ—Ä–µ–Ω—ã?"
)

DELETE_ERROR_TEXT = "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


async def _apply_nav(state: FSMContext, action: str, screen: ScreenState) -> None:
    if action == "root":
        await nav_root(state, screen)
    elif action == "push":
        await nav_push(state, screen)
    else:
        await nav_replace(state, screen)


async def render_home(
    bot: Bot,
    state: FSMContext,
    chat_id: int,
    *,
    nav_action: str = "root",
    is_authed: bool = False,
    profile: AccountProfile | None = None,
    extra: str | None = None,
) -> int:
    await _apply_nav(state, nav_action, ScreenState(SCREEN_HOME))
    if not is_authed or profile is None:
        text = GUEST_HOME_TEXT
        keyboard = kb_home(False)
    else:
        name = profile.company_name or profile.display_login
        text = AUTH_HOME_TEMPLATE.format(
            name=name,
            wb="‚úÖ" if profile.wb_api else "‚Äî",
            ms="‚úÖ" if profile.ms_api else "‚Äî",
        )
        if extra:
            text = f"{text}\n\n{extra}"
        keyboard = kb_home(True)
    return await card_manager.render(bot, chat_id, text, reply_markup=keyboard, state=state)


async def render_export_progress(
    bot: Bot,
    state: FSMContext,
    chat_id: int,
    *,
    kind: str,
    nav_action: str = "push",
) -> int:
    await _apply_nav(
        state,
        nav_action,
        ScreenState(SCREEN_EXPORT_STATUS, {"kind": kind, "status": "progress"}),
    )
    return await card_manager.render(
        bot,
        chat_id,
        EXPORT_PROGRESS_TEXT,
        reply_markup=None,
        state=state,
    )


async def render_export_missing_token(
    bot: Bot,
    state: FSMContext,
    chat_id: int,
    *,
    service: str,
    nav_action: str = "push",
) -> int:
    await _apply_nav(
        state,
        nav_action,
        ScreenState(SCREEN_EXPORT_STATUS, {"service": service, "status": "missing"}),
    )
    text = EXPORT_MISSING_TEMPLATE.format(service=service)
    return await card_manager.render(
        bot,
        chat_id,
        text,
        reply_markup=kb_export_missing_token(),
        state=state,
    )


async def render_export_error(
    bot: Bot,
    state: FSMContext,
    chat_id: int,
    *,
    kind: str,
    nav_action: str = "replace",
) -> int:
    await _apply_nav(
        state,
        nav_action,
        ScreenState(SCREEN_EXPORT_STATUS, {"kind": kind, "status": "error"}),
    )
    return await card_manager.render(
        bot,
        chat_id,
        EXPORT_ERROR_TEXT,
        reply_markup=kb_export_error(),
        state=state,
    )


async def render_delete_confirm(
    bot: Bot,
    state: FSMContext,
    chat_id: int,
    *,
    nav_action: str = "push",
) -> int:
    await _apply_nav(state, nav_action, ScreenState(SCREEN_DELETE_CONFIRM))
    return await card_manager.render(
        bot,
        chat_id,
        DELETE_CONFIRM_TEXT,
        reply_markup=kb_delete_confirm(),
        state=state,
    )


async def render_delete_error(
    bot: Bot,
    state: FSMContext,
    chat_id: int,
    *,
    nav_action: str = "replace",
) -> int:
    await _apply_nav(state, nav_action, ScreenState(SCREEN_DELETE_CONFIRM, {"error": True}))
    return await card_manager.render(
        bot,
        chat_id,
        DELETE_ERROR_TEXT,
        reply_markup=kb_delete_error(),
        state=state,
    )


async def render_require_auth(
    bot: Bot, state: FSMContext, chat_id: int, *, nav_action: str = "replace"
) -> int:
    await _apply_nav(state, nav_action, ScreenState(SCREEN_AUTH_MENU))
    return await card_manager.render(
        bot,
        chat_id,
        REQUIRE_AUTH_TEXT,
        reply_markup=kb_auth_menu(),
        state=state,
    )


async def render_login(
    bot: Bot,
    state: FSMContext,
    chat_id: int,
    *,
    nav_action: str = "replace",
    await_password: bool = False,
    prompt: str | None = None,
) -> int:
    await _apply_nav(
        state,
        nav_action,
        ScreenState(SCREEN_LOGIN, {"await_password": await_password}),
    )
    text = LOGIN_PASSWORD_TEXT if await_password else LOGIN_TEXT
    if prompt:
        text = f"{text}\n\n{prompt}"
    return await card_manager.render(bot, chat_id, text, reply_markup=kb_login(), state=state)


async def render_login_error(bot: Bot, state: FSMContext, chat_id: int) -> int:
    await _apply_nav(state, "replace", ScreenState(SCREEN_LOGIN, {"error": True}))
    return await card_manager.render(
        bot,
        chat_id,
        f"{LOGIN_TEXT}\n\n{LOGIN_ERROR_TEXT}",
        reply_markup=kb_retry_login(),
        state=state,
    )


async def render_register(
    bot: Bot,
    state: FSMContext,
    chat_id: int,
    *,
    nav_action: str = "replace",
    await_password: bool = False,
    prompt: str | None = None,
) -> int:
    await _apply_nav(
        state,
        nav_action,
        ScreenState(SCREEN_REGISTER, {"await_password": await_password}),
    )
    text = REGISTER_PASSWORD_TEXT if await_password else REGISTER_TEXT
    if prompt:
        text = f"{text}\n\n{prompt}"
    return await card_manager.render(bot, chat_id, text, reply_markup=kb_register(), state=state)


async def render_register_taken(bot: Bot, state: FSMContext, chat_id: int) -> int:
    await _apply_nav(state, "replace", ScreenState(SCREEN_REGISTER, {"error": True}))
    return await card_manager.render(
        bot,
        chat_id,
        f"{REGISTER_TEXT}\n\n{REGISTER_TAKEN_TEXT}",
        reply_markup=kb_retry_register(),
        state=state,
    )


def _format_datetime(dt: datetime) -> str:
    return dt.astimezone().strftime("%Y-%m-%d %H:%M")


async def render_profile(
    bot: Bot,
    state: FSMContext,
    chat_id: int,
    profile: AccountProfile,
    *,
    nav_action: str = "replace",
    extra: str | None = None,
) -> int:
    await _apply_nav(state, nav_action, ScreenState(SCREEN_PROFILE))
    wb_state = "‚úÖ" if profile.wb_api else "‚Äî"
    ms_state = "‚úÖ" if profile.ms_api else "‚Äî"
    email = profile.email or "‚Äî"
    company = profile.company_name or profile.display_login
    lines = [
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å",
        "",
        f"–ö–æ–º–ø–∞–Ω–∏—è: {company}",
        f"–õ–æ–≥–∏–Ω: {profile.display_login}",
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {_format_datetime(profile.created_at)}",
        "",
        f"–ü–æ—á—Ç–∞: {email}",
        f"WB API: {wb_state}",
        f"–ú–æ–π–°–∫–ª–∞–¥ API: {ms_state}",
    ]
    if extra:
        lines.extend(["", extra])
    text = "\n".join(lines)
    return await card_manager.render(bot, chat_id, text, reply_markup=kb_profile(), state=state)


async def render_edit_wb(
    bot: Bot,
    state: FSMContext,
    chat_id: int,
    *,
    nav_action: str = "push",
    prompt: str | None = None,
) -> int:
    await _apply_nav(state, nav_action, ScreenState(SCREEN_EDIT_WB))
    text = EDIT_WB_TEXT if not prompt else f"{EDIT_WB_TEXT}\n\n{prompt}"
    return await card_manager.render(bot, chat_id, text, reply_markup=kb_edit_wb(), state=state)


async def render_edit_ms(
    bot: Bot,
    state: FSMContext,
    chat_id: int,
    *,
    nav_action: str = "push",
    prompt: str | None = None,
) -> int:
    await _apply_nav(state, nav_action, ScreenState(SCREEN_EDIT_MS))
    text = EDIT_MS_TEXT if not prompt else f"{EDIT_MS_TEXT}\n\n{prompt}"
    return await card_manager.render(bot, chat_id, text, reply_markup=kb_edit_ms(), state=state)


async def render_edit_email(
    bot: Bot, state: FSMContext, chat_id: int, *, nav_action: str = "push"
) -> int:
    await _apply_nav(state, nav_action, ScreenState(SCREEN_EDIT_EMAIL))
    return await card_manager.render(
        bot,
        chat_id,
        EDIT_EMAIL_TEXT,
        reply_markup=kb_edit_email(),
        state=state,
    )


async def render_unknown(
    bot: Bot, state: FSMContext, chat_id: int, *, nav_action: str = "push"
) -> int:
    await _apply_nav(state, nav_action, ScreenState(SCREEN_UNKNOWN))
    return await card_manager.render(
        bot,
        chat_id,
        UNKNOWN_TEXT,
        reply_markup=kb_unknown(),
        state=state,
    )
