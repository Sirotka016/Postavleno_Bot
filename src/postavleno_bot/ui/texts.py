"""Collection of reusable text builders for bot messages."""

from __future__ import annotations

from ..services.accounts import AccountProfile
from ..utils.formatting import format_date_ru, mask_token
from ..help.steps import profile_step_lines


def profile_header(profile: AccountProfile) -> str:
    company_name = (profile.company_name or "").strip()
    company_icon = "‚úÖ" if company_name else "‚ùå"
    company_value = company_name or "‚Äî"

    email_value = "‚Äî"
    email_icon = "‚ùå"
    if profile.email:
        email = profile.email
        if profile.email_verified:
            email_icon = "‚úÖ"
            email_value = f"{email} (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ)"
        else:
            email_icon = "‚ùå"
            email_value = f"{email} (–Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚ùå)"
    elif profile.email_verified:
        # Defensive branch: verified flag without email should not happen.
        email_icon = "‚ùå"
        email_value = "‚Äî"

    wb_token = (profile.wb_api or "").strip()
    wb_icon = "‚úÖ" if wb_token else "‚ùå"
    wb_value = mask_token(wb_token)

    created_at = format_date_ru(profile.created_at)

    return (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {profile.display_login}\n\n"
        f"{company_icon} –ö–æ–º–ø–∞–Ω–∏—è: {company_value}\n"
        f"{email_icon} –ü–æ—á—Ç–∞: {email_value}\n"
        f"{wb_icon} WB API: {wb_value}\n\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at}"
    )


def company_prompt_text() -> str:
    return (
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏. –≠—Ç–æ –∏–º—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ. "
        "–ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∂–µ."
    )


def company_rename_prompt_text() -> str:
    return "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏."


def company_menu_text(company_name: str) -> str:
    return f"üìÅ –ö–æ–º–ø–∞–Ω–∏—è\n\n–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {company_name}"


def company_delete_confirm_text() -> str:
    return "–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å? –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."


def email_prompt_text() -> str:
    return (
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à email. –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –∞–¥—Ä–µ—Å–∞ "
        "NeAniiime@gmail.com."
    )


def email_menu_text(email: str, verified: bool) -> str:
    status = "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ" if verified else "–Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚ùå"
    return f"‚úâÔ∏è –ü–æ—á—Ç–∞\n\n–¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å: {email}\n–°—Ç–∞—Ç—É—Å: {status}"


def email_code_prompt(email: str) -> str:
    return (
        f"–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–¥ –Ω–∞ {email}. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –º–∏–Ω—É—Ç."
    )


def email_unlink_confirm_text() -> str:
    return "–û—Ç–≤—è–∑–∞—Ç—å –ø–æ—á—Ç—É? –¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å? –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."


def wb_prompt_text() -> str:
    return (
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á WB API (–∫–∞–±–∏–Ω–µ—Ç WB ‚Üí –î–æ—Å—Ç—É–ø –∫ API). –ö–ª—é—á —Ö—Ä–∞–Ω–∏—Ç—Å—è —É –Ω–∞—Å –≤ "
        "–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ."
    )


def wb_menu_text(masked: str) -> str:
    return f"üîë WB API\n\n–¢–µ–∫—É—â–∏–π –∫–ª—é—á: {masked}"


def wb_delete_confirm_text() -> str:
    return "–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á WB API? –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."


def help_message(tg_name: str, *, authorized: bool) -> str:
    header = [
        f"–ü—Ä–∏–≤–µ—Ç, {tg_name}! ‚ú®",
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç Postavleno_Bot.",
        "",
        "–ö–∞–∫ –Ω–∞—á–∞—Ç—å:",
    ]
    if authorized:
        body = [
            "1) –û—Ç–∫—Ä–æ–π—Ç–µ ¬´–ü—Ä–æ—Ñ–∏–ª—å¬ª –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:",
            *profile_step_lines(authorized=True),
            "2) –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤—ã–≥—Ä—É–∑–∫—É.",
            "3) ¬´–û–±–Ω–æ–≤–∏—Ç—å¬ª ‚Äî –ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤.",
            "4) ¬´–í—ã–π—Ç–∏¬ª ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é.",
        ]
    else:
        body = [
            "1) –ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            "2) –ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ—Ñ–∏–ª—å¬ª –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ:",
            *profile_step_lines(authorized=False),
            "3) –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤—ã–≥—Ä—É–∑–∫—É.",
            "4) ¬´–û–±–Ω–æ–≤–∏—Ç—å¬ª ‚Äî –ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤.",
            "5) ¬´–í—ã–π—Ç–∏¬ª ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é.",
        ]

    return "\n".join([*header, *body])


__all__ = [
    "company_delete_confirm_text",
    "company_menu_text",
    "company_rename_prompt_text",
    "company_prompt_text",
    "email_code_prompt",
    "email_menu_text",
    "email_prompt_text",
    "email_unlink_confirm_text",
    "help_message",
    "profile_header",
    "wb_delete_confirm_text",
    "wb_menu_text",
    "wb_prompt_text",
]
